from flask import Flask, render_template, request, jsonify
from control_system import StepperControlSystem, AxisConfig
from raspberry_pi_hw import RaspberryPiHardware
from config import DEFAULT_AXES_CONFIG, DEFAULT_PIN_CONFIG
from flask_cors import CORS
import argparse
import logging

app = Flask(__name__, template_folder='../templates', static_folder='../static')
CORS(app)  # –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
control_system = None

def parse_arguments():
    parser = argparse.ArgumentParser(description='Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–æ–≤—ã–º–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏')
    parser.add_argument('--simulate', action='store_true', help='–†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--port', type=int, default=5000, help='–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--host', type=str, default='0.0.0.0', help='–•–æ—Å—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞')
    return parser.parse_args()


def init_control_system(simulate=False):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    global control_system

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –æ–±—ä–µ–∫—Ç—ã AxisConfig
    axes_config = {}
    for axis_name, axis_data in DEFAULT_AXES_CONFIG.items():
        axes_config[axis_name] = AxisConfig(
            name=axis_name,
            steps_per_degree=axis_data['steps_per_degree'],
            max_angle=axis_data['max_angle'],
            min_angle=axis_data['min_angle'],
            homing_pin=axis_data['homing_pin'],
            max_speed=axis_data.get('max_speed', 10.0),
            holding_torque=axis_data.get('holding_torque', True)
        )

    # –í—ã–±–∏—Ä–∞–µ–º –∞–ø–ø–∞—Ä–∞—Ç–Ω—É—é —á–∞—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if simulate:
        from simulated_hw import SimulatedHardware
        hardware = SimulatedHardware(DEFAULT_PIN_CONFIG)
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –°–ò–ú–£–õ–Ø–¶–ò–ò")
    else:
        try:
            hardware = RaspberryPiHardware(DEFAULT_PIN_CONFIG)
            print("üîß –ó–∞–ø—É—Å–∫ —Å –†–ï–ê–õ–¨–ù–´–ú –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º")
        except Exception as e:
            logging.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
            logging.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏")
            from simulated_hw import SimulatedHardware
            hardware = SimulatedHardware(DEFAULT_PIN_CONFIG)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_system = StepperControlSystem(axes_config, hardware)
    logging.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return control_system


@app.before_request
def before_request():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    global control_system
    if control_system is None:
        control_system = init_control_system()


@app.route('/')
def index():
    return render_template('control_panel.html')


@app.route('/api/move', methods=['POST'])
def api_move():
    try:
        print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/move")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("–ó–∞–≥–æ–ª–æ–≤–∫–∏:", request.headers)   # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if control_system is None:
            print("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return jsonify({
                'status': 'error',
                'message': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            }), 500

        data = request.json
        print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        coordinates = {
            'horizontal': float(data['h_angle']),
            'vertical': float(data['v_angle'])
        }

        print("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", coordinates)  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        speed = float(data.get('speed', 10.0))

        if control_system.move_to_coordinates(coordinates, speed):
            print("–î–≤–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–æ")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return jsonify({
                'status': 'success',
                'message': '–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ',
                'target_angles': coordinates,
                'speed': speed
            })
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return jsonify({
                'status': 'error',
                'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'
            }), 400

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ api_move: {str(e)}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500


@app.route('/api/jog', methods=['POST'])
def api_jog():
    try:
        if control_system is None:
            return jsonify({
                'status': 'error',
                'message': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            }), 500

        data = request.json
        axis = data['axis']
        direction_str = data['direction']

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ–≤–æ–µ
        direction = 1 if direction_str == 'positive' else -1

        control_system.geometric_jog(axis, direction)

        return jsonify({
            'status': 'success',
            'axis': axis,
            'direction': direction_str,
            'current_angle': control_system.current_angles.get(axis, 0)
        })

    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500


@app.route('/api/home', methods=['POST'])
def api_home():
    try:
        if control_system is None:
            return jsonify({
                'status': 'error',
                'message': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            }), 500

        data = request.json
        axis = data['axis']

        control_system.home_axis(axis)

        return jsonify({
            'status': 'success',
            'axis': axis,
            'message': '–ü–æ–∏—Å–∫ –Ω—É–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω'
        })

    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500


@app.route('/api/stop', methods=['POST'])
def api_stop():
    try:
        if control_system is None:
            return jsonify({
                'status': 'error',
                'message': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            }), 500

        control_system.stop_movement()

        return jsonify({
            'status': 'success',
            'message': '–í—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'
        })

    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500


@app.route('/api/status', methods=['GET'])
def api_status():
    try:
        if control_system is None:
            return jsonify({
                'status': 'error',
                'message': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            }), 500

        return jsonify({
            'status': 'operational',
            'current_angles': control_system.current_angles,
            'is_holding': control_system.is_holding,
            'jog_multipliers': control_system.jog_multipliers
        })

    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500


@app.route('/api/health', methods=['GET'])
def api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        'status': 'healthy' if control_system is not None else 'not_initialized',
        'initialized': control_system is not None
    })


if __name__ == '__main__':
    args = parse_arguments()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ
    control_system = init_control_system(simulate=args.simulate)
    app.run(host='0.0.0.0', port=5000, debug=True)