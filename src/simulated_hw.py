import time
from hardware_interface import HardwareInterface

class SimulatedHardware(HardwareInterface):
    def __init__(self, pin_config: dict):
        self.pin_config = pin_config
        self.endstop_states = {pin: False for pin in pin_config.get('endstops', [])}
        self.current_positions = {axis: 0 for axis in pin_config.keys() if axis != 'endstops'}
        print("üéÆ –°–∏–º—É–ª—è—Ü–∏—è –∞–ø–ø–∞—Ä–∞—Ç—É—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"üìå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∏–Ω–æ–≤: {pin_config}")

    def move_axis(self, axis: str, steps: int):
        direction = "–≤–ø–µ—Ä–µ–¥" if steps > 0 else "–Ω–∞–∑–∞–¥"
        print(f"üéØ –°–∏–º—É–ª—è—Ü–∏—è: –î–≤–∏–∂–µ–Ω–∏–µ –æ—Å–∏ {axis}: {abs(steps)} —à–∞–≥–æ–≤ {direction}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        self.current_positions[axis] += steps
        print(f"üìä –û—Å—å {axis} –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {self.current_positions[axis]} —à–∞–≥–æ–≤")

        time.sleep(0.001 * abs(steps))

    def set_holding_torque(self, axis: str, enable: bool):
        state = "–≤–∫–ª—é—á–µ–Ω" if enable else "–≤—ã–∫–ª—é—á–µ–Ω"
        print(f"üîí –°–∏–º—É–ª—è—Ü–∏—è: –¢–æ–∫ —É–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Å–∏ {axis}: {state}")

    def read_endstop(self, pin: int) -> bool:
        # –í —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false (–∫–æ–Ω—Ü–µ–≤–∏–∫ –Ω–µ –Ω–∞–∂–∞—Ç)
        return self.endstop_states.get(pin, False)

    def emergency_stop(self):
        print("üõë –°–ò–ú–£–õ–Ø–¶–ò–Ø: –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê - –í—Å–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    def cleanup(self):
        print("üßπ –†–µ—Å—É—Ä—Å—ã —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")

    def get_current_position(self, axis: str) -> int:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return self.current_positions.get(axis, 0)