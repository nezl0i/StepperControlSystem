// static/js/script.js
const API_BASE = window.location.origin;

let statusInterval;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    updateStatus();
    setupEventListeners();
    startStatusPolling();
});

function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    document.getElementById('moveForm').addEventListener('submit', function(e) {
        e.preventDefault();
        moveToCoordinates();
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    document.getElementById('speed').addEventListener('input', function() {
        document.getElementById('speedValue').textContent = this.value + ' –≥—Ä–∞–¥/—Å–µ–∫';
    });
}

function startStatusPolling() {
    statusInterval = setInterval(updateStatus, 2000);
}

async function updateStatus() {
    try {
        const response = await fetch(`${API_BASE}/api/status`);
        const data = await response.json();
        
        if (data.status === 'operational') {
            updateUI(data);
        }
    } catch (error) {
//        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã');
    }
}

function updateUI(data) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
    document.getElementById('currentH').textContent = data.current_angles.horizontal.toFixed(1) + '¬∞';
    document.getElementById('currentV').textContent = data.current_angles.vertical.toFixed(1) + '¬∞';
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è
    const holding = data.is_holding.horizontal || data.is_holding.vertical;
    document.getElementById('holdingStatus').textContent = holding ? '–í–∫–ª' : '–í—ã–∫–ª';
    document.getElementById('holdingStatus').style.color = holding ? '#2ed573' : '#ff4757';
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –¥–∂–æ–≥–∞
    document.getElementById('hMultiplier').textContent = `√ó${Math.pow(2, data.jog_multipliers.horizontal).toFixed(1)}`;
    document.getElementById('vMultiplier').textContent = `√ó${Math.pow(1.8, data.jog_multipliers.vertical).toFixed(1)}`;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    const indicator = document.querySelector('.status-indicator');
    indicator.classList.add('connected');
}

async function moveToCoordinates() {
    console.log("–§—É–Ω–∫—Ü–∏—è moveToCoordinates –≤—ã–∑–≤–∞–Ω–∞");

    const hAngle = parseFloat(document.getElementById('hAngle').value);
    const vAngle = parseFloat(document.getElementById('vAngle').value);
    const speed = parseFloat(document.getElementById('speed').value);

    console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", { hAngle, vAngle, speed }); // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    try {
        const response = await fetch(`${API_BASE}/api/move`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                h_angle: hAngle,
                v_angle: vAngle,
                speed: speed
            })
        });

        console.log("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);
        console.log("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:", response.headers);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", data);
        
        if (data.status === 'success') {
            showSuccess('–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ');
            updateStatus();
        } else {
            showError(data.message || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError(`–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ${error.message}`);
    }
}

async function jog(axis, direction) {
    try {
        const response = await fetch(`${API_BASE}/api/jog`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                axis: axis,
                direction: direction // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            })
        });

        const data = await response.json();

        if (data.status === 'success') {
            showSuccess(`–î–∂–æ–≥ –æ—Å–∏ ${axis} (${direction}) –≤—ã–ø–æ–ª–Ω–µ–Ω`);
            updateStatus(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è
        } else {
            showError(data.message || '–û—à–∏–±–∫–∞ –¥–∂–æ–≥–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∂–æ–≥');
    }
}

async function homeAxis(axis) {
    try {
        const response = await fetch(`${API_BASE}/api/home`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                axis: axis
            })
        });

        const data = await response.json();
        
        if (data.status === 'success') {
            showSuccess(`–ü–æ–∏—Å–∫ –Ω—É–ª—è –æ—Å–∏ ${axis} –≤—ã–ø–æ–ª–Ω–µ–Ω`);
        } else {
            showError(data.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω—É–ª—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –Ω—É–ª—è');
    }
}

async function emergencyStop() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤–∞—Ä–∏–π–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É?')) {
        return;
    }

    try {
        const response = await fetch(`${API_BASE}/api/stop`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({})
        });

        const data = await response.json();
        
        if (data.status === 'success') {
            showSuccess('–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', 'warning');
        } else {
            showError(data.message || '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É');
    }
}

function showSuccess(message, type = 'success') {
    showNotification(message, type);
}

function showError(message) {
    showNotification(message, 'error');
}

function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let container = document.getElementById('notification-container');
    if (!container) {
        container = document.createElement('div');
        container.id = 'notification-container';
        container.className = 'notification-container';
        document.body.appendChild(container);
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;

    // –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let icon = 'üí°';
    switch (type) {
        case 'success':
            icon = '‚úÖ';
            break;
        case 'error':
            icon = '‚ùå';
            break;
        case 'warning':
            icon = '‚ö†Ô∏è';
            break;
        case 'info':
            icon = '‚ÑπÔ∏è';
            break;
    }

    notification.innerHTML = `
        <span class="notification-icon">${icon}</span>
        <span class="notification-content">${message}</span>
        <button class="notification-close" onclick="this.parentElement.remove()">√ó</button>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    const autoRemove = setTimeout(() => {
        hideNotification(notification);
    }, 5000);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    notification.addEventListener('mouseenter', () => {
        clearTimeout(autoRemove);
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å–Ω–æ–≤–∞ –∫–æ–≥–¥–∞ —É–±–∏—Ä–∞–µ–º –º—ã—à—å
    notification.addEventListener('mouseleave', () => {
        setTimeout(() => {
            hideNotification(notification);
        }, 3000);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
    notification.querySelector('.notification-close').addEventListener('click', () => {
        clearTimeout(autoRemove);
        hideNotification(notification);
    });
}

function hideNotification(notification) {
    notification.classList.remove('show');
    notification.classList.add('hide');

    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        if (notification.parentElement) {
            notification.parentElement.removeChild(notification);
        }
    }, 300);
}

function showSuccess(message) {
    showNotification(message, 'success');
}

function showError(message) {
    showNotification(message, 'error');
}

function showWarning(message) {
    showNotification(message, 'warning');
}

function showInfo(message) {
    showNotification(message, 'info');
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
// showSuccess('–î–≤–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–æ!');
// showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
// showWarning('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª –¥–≤–∏–∂–µ–Ω–∏—è');
// showInfo('–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
